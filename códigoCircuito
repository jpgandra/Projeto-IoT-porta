#include<WiFi.h>
#include<HTTPClient.h>
#include<ESP32Servo.h>
#include<LiquidCrystal_I2C.h>
const char* ssid = "Wokwi-GUEST";
const char* password = "";
const char* host = "api.thingspeak.com";
const String APIkeyWrite = "SuakeyWrite";
const String APIkeyRead = "SuakeyRead";
const String UltimosRESULTADOS = "1"; 
const String IDchannel = "SUAIDCHANNEL";
String urlread ="http://api.thingspeak.com/channels/"+IDchannel+"/feeds.json?api_key="+APIkeyRead+"&results="+UltimosRESULTADOS;
LiquidCrystal_I2C display(0x27, 16, 2);
Servo servo;
int grauservo=90;
int dado=0;
String valor="3";
String cmanterior;
void setup() {
  servo.attach(15);
  pinMode(4, OUTPUT);
  pinMode(2, INPUT);
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  display.init();
  display.backlight();
  display.setCursor(0,0);
  display.print("conectando-se");
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(100);
    display.print(".");
  }
  display.clear();
  display.setCursor(0,0);
  display.print("Conectado");
  delay(1000);
  display.setCursor(0,0);
  display.print("Porta: fechada");
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) 
  {
    HTTPClient http;
    http.begin(urlread);
    int httpCode = http.GET();
    Serial.printf("[HTTP] GET... code:%d/n",httpCode);
    if(httpCode == HTTP_CODE_OK)
    {
      String resposta = http.getString();
      Serial.println(resposta);

      char *ptr = strstr((const char *)resposta.c_str(), "field2");
      String campo = &ptr[9];
      Serial.println(campo);
      char *var = strstr((const char *)campo.c_str(), "field2");
      valor = &var[9];
      Serial.println(valor);
      valor.replace('"', '\0');
      Serial.println(valor.c_str());
    }
    if(valor=="0"||cmanterior=="0")
    {
      if(grauservo>1)
        {
          for(grauservo==90;grauservo>=1; grauservo--)
          {
            servo.write(grauservo);
            delay(20);
          }
          display.clear();
          display.setCursor(0,0);
          display.print("Porta:");
          display.setCursor(7,0);
          display.print("aberta ");
          dado=1;
        }
      display.setCursor(0,1);
      display.print("Sensor:desligado");
      cmanterior= "0";
    }
    if(valor=="1"||cmanterior=="1")
    {
      if(grauservo<90)
        {
          for(grauservo==1;grauservo<=90; grauservo++)
          {
            servo.write(grauservo);
            delay(20);
          }
          display.clear();
          display.setCursor(0,0);
          display.print("Porta:");
          display.setCursor(7,0);
          display.print("fechada");
          dado=0;
        }
      display.setCursor(0,1);
      display.print("Sensor:desligado");
      cmanterior= "1";
    }
    if(valor=="2"||cmanterior=="2")
    {
      display.setCursor(0,1);
      display.print("Sensor:desligado");
      cmanterior= "2";
    }
    if(valor=="3"||cmanterior=="3")
    {
      digitalWrite(4, HIGH);
      delay(0.01);
      digitalWrite(4, LOW);
      float tempo= pulseIn(2, HIGH);
      float distancia= 343*0.000001*tempo/2*100; 
      if(distancia<=100)
      {
        if(grauservo>1)
        {
          for(grauservo==90;grauservo>=1; grauservo--)
          {
            servo.write(grauservo);
            delay(20);
          }
          display.clear();
          display.setCursor(0,0);
          display.print("Porta:");
          display.setCursor(7,0);
          display.print("aberta ");
          dado=1;
        }
      }
      if(distancia>100)
      {
        if(grauservo<90)
        {
          for(grauservo==1;grauservo<=90; grauservo++)
          {
            servo.write(grauservo);
            delay(20);
          }
          display.clear();
          display.setCursor(0,0);
          display.print("Porta:");
          display.setCursor(7,0);
          display.print("fechada");
          dado=0;
        }
      }
      display.setCursor(0,1);
      display.print("Sensor:ligado   ");
      cmanterior= "3";
    }
    WiFiClient client; 
    const int httpPort = 80; 
    if (!client.connect(host, httpPort))
    {
      return; 
    }
    String url = "/update?api_key="; 
    url += APIkeyWrite; 
    url += "&field1="; 
    url += String(dado); 
    url += "\r\n"; 
    Serial.println(url);
    String endereco = String("GET ") + url + "HTTP/1.1\r\n" + "Host: " + host + "\r\n" + "Connection: close\r\n\r\n";
    Serial.println(endereco); 
    client.print(endereco);
    delay(15000);
  }
else
{
  WiFi.begin(ssid, password);
  display.clear();
  display.setCursor(0,0);
  display.print("Reconectando"); 
  while(WiFi.status() != WL_CONNECTED)
  {  
    display.print(".");
    delay(1000);
  }
}
}
